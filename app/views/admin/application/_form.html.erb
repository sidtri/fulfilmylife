<%#
# Form Partial

This partial is rendered on a resource's `new` and `edit` pages,
and renders all form fields for a resource's editable attributes.

## Local variables:

- `page`:
  An instance of [Administrate::Page::Form][1].
  Contains helper methods to display a form,
  and knows which attributes should be displayed in the resource's form.

[1]: http://www.rubydoc.info/gems/administrate/Administrate/Page/Form
%>

<%= form_for([namespace, page.resource], html: { class: "form" }) do |f| %>
  <% if page.resource.errors.any? %>
    <div id="error_explanation">
      <h2>
        <%= pluralize(page.resource.errors.count, "error") %>
        prohibited this <%= page.resource_name %> from being saved:
      </h2>

      <ul>
        <% page.resource.errors.full_messages.each do |message| %>
          <li class="flash-error"><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <% page.attributes.each do |attribute| -%>
    <div class="field-unit field-unit--<%= attribute.html_class %>">
      <%= render_field attribute, f: f %>
    </div>
  <% end -%>

  <div class="form-actions">
    <%= f.submit %>
  </div>
<% end %>

<%= javascript_include_tag 'administrate' %>
<script>
  function markdown_editor(element_name) {

      var sm = new SimpleMDE({
          autofocus: true,
          autosave: true,
          blockStyles: {
              bold: "__",
              italic: "_"
          },
          element: document.getElementById(element_name),
          forceSync: true,
          indentWithTabs: false,
          insertTexts: {
              horizontalRule: ["", "\n\n-----\n\n"],
              image: ["![](http://", ")"],
              link: ["[", "](http://)"],
              table: ["", "\n\n| Column 1 | Column 2 | Column 3 |\n| -------- | -------- | -------- |\n| Text     | Text      | Text     |\n\n"],
          },
          lineWrapping: false,
          parsingConfig: {
              allowAtxHeaderWithoutSpace: true,
              strikethrough: false,
              underscoresBreakWords: true,
          },
          placeholder: "Type here...",
          promptURLs: true,
          renderingConfig: {
              singleLineBreaks: false,
              codeSyntaxHighlighting: true,
          },
          shortcuts: {
              drawTable: "Cmd-Alt-T"
          },
          showIcons: ["code", "table"],
          spellChecker: false,
          status: false,
          status: ["autosave", "lines", "words", "cursor"], // Optional usage
          status: ["autosave", "lines", "words", "cursor", {
              className: "keystrokes",
              defaultValue: function(el) {
                  this.keystrokes = 0;
                  el.innerHTML = "0 Keystrokes";
              },
              onUpdate: function(el) {
                  el.innerHTML = ++this.keystrokes + " Keystrokes";
              }
          }], // Another optional usage, with a custom status bar item that counts keystrokes
          styleSelectedText: false,
          tabSize: 4,
      });
      
      $("input[name='commit']").click(function(e){
        sm.togglePreview();
        $('#card_parsed_content').val($('.editor-preview').html());
      })
  }
  (function() {
    markdown_editor("card_content");
     // your page initialization code here
     // the DOM will be available here

  })();
</script>
